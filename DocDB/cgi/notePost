#!/usr/bin/env perl

use lib '..';
use lib '/www/mysql/Msql-Mysql-modules-1.2216/blib/lib';
use lib '/www/mysql/Msql-Mysql-modules-1.2216/blib/arch/auto/DBD/mysql';
use CGI qw/:standard :html3/;
use CGI::Carp qw/fatalsToBrowser/;
use File::Copy;
use File::Path;
use File::Basename;
use POSIX;
use DBI;
#use strict;


# Variables - change these for your project

$project = "BTeV";
$url_number_assign = "<a href=\"http://www-btev.fnal.gov/internal_documents/docdb/
noteReq.html\"> request a new number</a>";
$doc_dir = "/www/html/btevdocs/";
$DOC_URL = "http://www-btev.fnal.gov/btevdocs";
$MAIL_LIST = "btev-notes\@fnal.gov";
$MAILLOG = "/var/tmp/mcnoteMail.log";
$MAIL = "/usr/ucb/Mail";
$dsn = "DBI:mysql:btev_documents:fnsimu1";
$user_name = "wsrvbtev";
$passwd = "numiweb";
$database = "btev_documents";
$table = "notes";
$note_prefix = "btev";
$stylesheet = "/styles/style_x11.css";
$err_mail = "garren\@fnal.gov";

# Get file name, Abstract file name and note number from form 
# input 

$file = param('filename');
$absfile = param('abstract');
$note_number = param('number');
$rev_yn = param('rev_yn');
$user = param('username');
$doc_type = param('doc_type');
$upload_type = param('upload_type');
$main_file = param('main_file');
$doc_type_same = param('doc_type_same');

# Exit program if either note_number, file, absfile or upload _type missing

print header();
print start_html(-title=>"$project Notes File Upload Results",
		-style=>{-src=>$stylesheet});
print "<BODY>\n";

if ($note_number <= 0 ) {
  print h1("Error");
  print h3("Error: You must specify a note number");
  end_html;
  exit;
}

if ($upload_type eq "") {
  print h1("Error");
  print h3("Error: You must specify an upload type");
  end_html;
  exit;
}

if ($file eq "") {
  print h1("Error");
  print h3("Error: You must specify a file name");
  end_html;
  exit;
}

if ($absfile eq "" ) {
  print h1("Error");
  print h3("Error: You must specify an abstract file");
  end_html;
  exit;
}

if ($upload_type eq 'multi' && $main_file eq "") {
  print h1("Error");
  print h3("Error: You specified Multiple File Upload and did not provide a primary document name");
  end_html;
  exit;
}



# Process the form if there is a file name, an abstract name, an upload_type
# and a note number	

if ($file ne "" && $absfile ne "" && $note_number >= 0 && $upload_type ne "") {

# Connect to the database

  if(!defined($dbh = DBI->connect($dsn,$user_name,$passwd,
				  {RaiseError => 0,PrintError => 0}))) {
    $error_message = $DBI::db_errstr;
    print h1("Error");
    print h3("Error: Connect failed: $error_message");
    print("Please send mail to $err_mail with the error you encountered");
    end_html;
    exit;
  }


# Prepare the query to locate the current entry for this note
 
  $sql_sel_number = "select * from $table where number = $note_number";
  if(!defined($sth = $dbh->prepare($sql_sel_number))) {
    $error_message = $dbh->errstr;
    print h3("Error: Query preparation failed: $error_message");
    print("Please send mail to $err_mail with the error you encountered");
    end_html;
    exit;
  }

# Execute the query

  if(!defined($sth->execute())) {
    $error_message = $sth->errstr;
    print h3("Error: Query failed: $error_message");
    print("Please send mail to $err_mail with the error you encountered");
    end_html;
    exit;
  }


# Check to see that this number has been requested and assigned. Only expect
# one row or 0 rows 

  $nrec = $sth->rows;
  if ($nrec < 1)
    {
      print h3("Sorry, no number $note_number has been assigned");
      print h3("Please enter the correct number and try again");
      print h3("If you do not have a number then go and
		$url_number_assign");
      end_html;
      exit;
    }

# Fetch the query results from above

  @row = $sth->fetchrow_array();


# Check to see if there is already a version posted

  if (defined ($row[11]))
    {

# Did the user ask for a revision?

      if($rev_yn eq "no") {
	print h3("Warning: File $curr_file already 
				exists");
	print h3("Please specify a different number 
				or indicate that this is a revised version");
	end_html;
	exit;
      }
    }

# Check to see whether the document is PUBLIC or RESTRICTED. If this field is
# NULL then assume RESTRICTED and set this field in the database

  if ($row[7] eq "PUBLIC")
    {
      $dist_dir = "public";
    }
  elsif ($row[7] eq "RESTRICTED")
    {
      $dist_dir = "restricted";
    }
  else
    {
      $dist_dir = "restricted";
    }

# Set the directory name

  $this_dir = sprintf "%s%.4d",$note_prefix,$note_number;

# Set the file name
	  
  $this_file = $this_dir;

# Need to check that the Content-Type is correct, both for document and
# textfile

# Abstract must be a text file of type text/plain

  $absmimetype = uploadInfo($absfile)->{'Content-Type'} || '';
  $mimetype = uploadInfo($file)->{'Content-Type'} || '';
  unless ($absmimetype eq 'text/plain'){
    print h3("Abstract $absfile must be a text file");
    if ($absmimetype eq "") {
      print h3("Content-Type unknown");
    }
    else {print h3("Content-Type is $absmimetype");}
    end_html;
    exit;
  }

# Document can be one of the following
# application/postscript
# application/pdf
# application/msword
# text/html
# text/plain
# application/x-tar
# application/x-gtar
# application/x-gzip
# application/ppt

# tar and gzip types are only accepted for upload_type = multi

%doc_names = ( ps=>'Postscript',
	      pdf=>'PDF',
	      doc=>'Microsoft Word',
	      ppt=>'PowerPoint',
	      txt=>'Plain Text',
	      html=>'HTML');

# Document file name 
	  
  $tmpfile=tmpFileName($file);

# Abstract file name

  $abstmpfile=tmpFileName($absfile);

  if ($upload_type eq 'single') {
    unless ($mimetype eq 'application/postscript'  || $mimetype eq 
	    'application/pdf' || $mimetype eq 'application/msword' ||
	    $mimetype eq 'text/html' || $mimetype eq 'text/plain'
	    || $mimetype eq 'application/ppt') {
      print ("<p>Document $file is not one of the expected formats</p>");
      print ("<p>Please return to the posting page and choose a supported format</p>");
      if ($mimetype eq "") {
	print h3("Content-Type unknown");
      }
      else {print h3("Content-Type is $mimetype");}
      
      end_html;
      exit;
    }


# Set file extension and directory for document

    if ($mimetype eq 'application/postscript'){
      $filetype=".ps";
      $dirtype="ps";
    }
    elsif ($mimetype eq 'application/pdf'){
      $filetype=".pdf";
      $dirtype="pdf";
    }
    if ($mimetype eq 'application/ppt'){
      $filetype=".ppt";
      $dirtype="ppt";
    }
    if ($mimetype eq 'application/msword'){
      $filetype=".doc";
      $dirtype="doc";
    }
    if ($mimetype eq 'text/html'){
      $filetype=".html";
      $dirtype="html";
    }
    if ($mimetype eq 'text/plain'){
      $filetype=".txt";
      $dirtype="txt";
    }

# Filename to copy to
	  
    $copyfile=  $this_file.$filetype;
    $outdir=$doc_dir.$dist_dir."/".$dirtype."/".$this_dir;
    $outfile = $outdir."/".$copyfile;
    $url_file_name = $dist_dir."/".$dirtype."/".$this_dir."/".$copyfile;
    
    dir_exist($outdir);
    file_copy($tmpfile,$outdir,$outfile);

# Abstract file name

    $absoutfile=$doc_dir.$dist_dir."/".$dirtype."/".$this_dir."/".$this_file.".txt";

    file_copy($abstmpfile,$outdir,$absoutfile);

# Perform gzip on certain files to save space

    if ($doc_type eq 'ps') {
      $status = system("/usr/local/bin/gzip -f $outfile");
      if ($status != 0){
	print("Failed to compress document:$!\n");
	print("Please send mail to $err_mail with the error you encountered");
	end_html;
	exit;
      }
    }

# Print results

    print h1("$project Notes File Upload Results");
    
    print h2("The following actions have been taken");
    print ("<p>$file has been copied as $copyfile</p>");
    print ("<p>$absfile has been copied as $this_file.txt</p>");
  }

# Now deal with multi-part documents

  elsif ($upload_type eq "multi") {

# must be a tar file or a gzipped tar file

    unless ($mimetype eq 'application/x-tar'  || $mimetype eq 
	    'application/x-gzip' || $mimetype eq 'application/x-gtar') {
      print ("<p>Document $file is not one of the expected formats</p>");
      print ("<p>Please return to the posting page and choose a supported format</p>");
      if ($mimetype eq "") {
	print h3("Content-Type unknown");
      }
      else {print h3("Content-Type is $mimetype");}
      
      end_html;
      exit;
    }

# Set file extension depending on what we have

    if ($mimetype eq 'application/x-tar' || 
	$mimetype eq 'application/x-gtar'){
      $filetype=".tar";
    }

    if ($mimetype eq 'application/x-gzip'){
      $filetype=".tar.gz";
    }

# Will use the doc_type of the main document to decide which dir it goes into

    $copyfile=  $this_file.$filetype;
    $outdir=$doc_dir.$dist_dir."/".$doc_type."/".$this_dir;
    $outfile = $outdir."/".$copyfile;
    $tarfile = $this_file.".tar";

    dir_exist($outdir);
    file_copy($tmpfile,$outdir,$outfile);


# Abstract file name

    $absoutfile=$doc_dir.$dist_dir."/".$doc_type."/".$this_dir."/".$this_file.".txt";

    file_copy($abstmpfile,$outdir,$absoutfile);

# Now process the tar file

    chdir($outdir);

# Determine whether we have gzipped tar and act accordingly

    if ($mimetype eq 'application/x-gzip'){
      $status = system("/usr/local/bin/gunzip -f $copyfile");
      if ($status != 0){
	print("Failed to uncompress document:$!\n");
	print("Please send mail to $err_mail with the error you encountered");
	end_html;
	exit;
      }
    }

# Now need to unwind the tar file

    $status = system("/usr/bin/tar -xf $tarfile");
    if ($status != 0) {
      print("Failed to unwind tar file:$!\n");
      print("Please send mail to $err_mail with the error you encountered");
	end_html;
	exit;
      }
      
# For all doc_types we rename the main_file. Remove the tar file

    $copyfile = $this_file.".".$doc_type;
    rename($main_file,$copyfile);
    unlink($tarfile);
   

# For html we assume that all other
# files are links in the main_file and we don't touch them.

    if ($doc_type ne "html") {

      if (!defined(opendir NOTE_DIR, $outdir)) {
      print("Error: directory $outdir not found\n");
      print("Please send mail to $err_mail with the error you encountered");
	end_html;
	exit;
      }
	
# Can only handle these types of documents

      @suffixlist = ('\.ps','\.pdf','\.doc','\.ppt','\.txt','\.xls',
		    '\.gif','\.jpeg','\.eps','\.jpg');

# Loop through the directory and make a list of the files.
# Start a counter

      $num_files = 0;

      while ($curr_file = readdir NOTE_DIR) {
	if ($curr_file ne $copyfile && $curr_file ne $this_file.".txt" &&
	   $curr_file ne '.' && $curr_file ne '..') {
	  $num_files++;
	  $tmp_filename[$num_files] = $curr_file;
	}
      }
      closedir(NOTE_DIR);

      for ($n = 1; $n < $num_files+1 ; $n++) {
	($name,$path,$suffix) = fileparse($tmp_filename[$n],@suffixlist);
	$new_name = $this_file."_".$n.$suffix;
	rename($tmp_filename[$n],$new_name);
	
# Perform gzip on certain files to save space

	if ($suffix eq '.ps'  || $suffix eq 'eps') {
	  $status = system("/usr/local/bin/gzip -f $new_name");
	  if ($status != 0){
	    print("Failed to compress document:$!\n");
	    print("Please send mail to $err_mail with the error you encountered");
	    end_html;
	    exit;
	  }
	}
      }


# Perform gzip on certain files to save space

      if ($doc_type eq 'ps' || $doc_type eq 'doc' || $doc_type eq 'ppt' ) {
	$status = system("/usr/local/bin/gzip -f $copyfile");
	if ($status != 0){
	  print("Failed to compress document:$!\n");
	  print("Please send mail to $err_mail with the error you encountered");
	  end_html;
	  exit;
	}
      }


# Print results

      print h1("$project Notes File Upload Results");
      
      print h2("The following actions have been taken");
      print ("<p>$file has been copied and unwound</p>");
      print ("<p>Document $main_file has been renamed as $copyfile<p>");
      print ("<p>$absfile has been copied as $this_file.txt</p>");
    }
  }

# For revsions check that the document type is the same. Otherwise we must
# remove the old directory

  if ($rev_yn eq "yes" && $doc_type_same eq "no") {

# construct directory path

    $old_dir = $doc_dir.$dist_dir."/".$row[8]."/".$this_dir;
    print ("<p>You specified a new document type for this revision<br>");
    print ("<p>The previous version of the document has been removed<br>");
    rmtree($old_dir);
  }

# Now we need to update the database with the posting information

# Get today's date in format YYYY-MM-DD

    $t = time;
    @time_list = localtime($t);
    $time_str = POSIX::strftime("%Y-%m-%d",@time_list);

# For a revision update the rev # and date revised

	if ($rev_yn eq "yes") {
		$revno = $row[9];
		++$revno;
		$sql_update_rev = "update $table set revision='$revno' where 
					number = $note_number";
		if(!defined($rows = $dbh->do($sql_update_rev))) {
		        $error_message = $dbh->errstr;
		        print h3("Error: Update failed: $error_message");
			print ("$sql_update_rev\n");
			print("Please send mail to $err_mail with the error you encountered");
			end_html;
			exit;
		      }

		$sql_update_rev_date = "update $table set date_rev='$time_str' 
                                  where number=$note_number";
		if(!defined($rows = $dbh->do($sql_update_rev_date))) {
		        $error_message = $dbh->errstr;
		        print h3("Error: Update failed: $error_message");
			print ("$sql_update_rev_date\n");
			print("Please send mail to $err_mail with the error you encountered");
			end_html;
			exit;
		}

		print ("<p>Entered revision \# $revno, revision date $time_str 
			for Note $note_number in $project Notes Database</p>");
	}

# Record posting date if not a revision

	else {
		$sql_update_fil_date = "update $table set date_fil='$time_str' 
		                    where number=$note_number";
		if(!defined($rows = $dbh->do($sql_update_fil_date))) {
		        $error_message = $dbh->errstr;
		        print h3("Error: Update failed: $error_message");
			print ("$sql_update_fil_date\n");
			print("Please send mail to $err_mail with the error you encountered");
			end_html;
			exit;
		}

		print ("<p>Entered posting date $time_str 
			for Note $note_number in $project Notes Database</p>");
	}

# Record the document type

	$sql_update_doctype = "update $table set doc_type='$doc_type' where
		number=$note_number";
	if(!defined($rows = $dbh->do($sql_update_doctype))) {
		$error_message = $dbh->errstr;
		print h3("Error: Update failed: $error_message");
			print ("$sql_update_doctype\n");
		print("Please send mail to $err_mail with the error you encountered");
		end_html;
		exit;
	}

  # Record the upload type
  
  $sql_update_uploadtype = "update $table set upload_type='$upload_type' where
		number=$note_number";
  if(!defined($rows = $dbh->do($sql_update_uploadtype))) {
    $error_message = $dbh->errstr;
    print h3("Error: Update failed: $error_message");
    print ("$sql_update_uploadtype\n");
    print("Please send mail to $err_mail with the error you encountered");
    end_html;
    exit;
  }


  print ("<p>Entered Document type $doc_type for 
		Note $note_number in $project Notes Database</p>");

  # Set distribution type to restricted if it was NULL in the database

  if ($row[7] eq "") {

    $sql_update_dist_type = "update $table set distribution ='restricted' 
                                  where number=$note_number";
    if(!defined($rows = $dbh->do($sql_update_dist_type))) {
      $error_message = $dbh->errstr;
      print h3("Error: Update failed: $error_message");
      print ("$sql_update_dist_type\n");
      print("Please send mail to $err_mail with the error you encountered");
      end_html;
      exit;
    }
  }

  # Add some info to the abstract file

  open ABS, ">>$absoutfile";
  print ABS "\n";
  print ABS "This is a $doc_names{$doc_type} document\n";
  print ABS "URL $DOC_URL/$url_file_name\n";

  if($rev_yn eq "yes") {print ABS "This is revision \# $revno\n";}
  print ABS "Posted by $user\n";
  close ABS;

  # Send mail to mailing list
  # Log messages to MAILLOG

  open LOG, ">>$MAILLOG";
  print LOG `date`;
  $mail_buf = "$MAIL -s \"$user posted note $note_number\" $MAIL_LIST < $absoutfile";
  system($mail_buf);
  print LOG "$mail_buf\n";
  close LOG;
    
}
print "</BODY>\n";
end_html;

  sub file_copy {

# This routine checks to see that a file has contents and copies them to 
# the destination directory, creating the directory if necessary

  local($infile,$dir,$outfile) = @_;

# Check if the file has any contents in case the user gave us the wrong 
# filename

  if(-z $infile) {
    print h3("Document appears to be be empty, check that you
		gave the correct filename");
    end_html;
    exit;
  }

# Perform the copy to the document area. 

  $status = copy($infile,$outfile);
  if ($status != 1){
    print("Copy of document failed:$!\n");
    print("Please send mail to $err_mail with the error you encountered");
    end_html;
    exit;
  }
  else {chmod 0644, $outfile};
  
}   

sub dir_exist {

  local($dir) = @_;

# Check to see if the document area already exists. If it does then remove
# the contents. Otherwise create it.


  if (! -d $dir) {
    $status = mkpath([$dir],0,0755);
    if ($status != 1){
      print("Failed to create directory $dir\n");
      print("Please send mail to $err_mail with the error you encountered");
      end_html;
      exit;
    }
  }
  else {
    opendir NOTE_DIR, $dir;
    while ($curr_file = readdir NOTE_DIR) {
      if ($curr_file ne '.' || $curr_file ne '..') {
	unlink($dir."/".$curr_file);
      }
    }
    closedir(NOTE_DIR);
  }
  
}


