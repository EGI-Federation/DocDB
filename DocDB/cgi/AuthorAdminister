#! /usr/bin/env perl
#
# Description: This script is called by AdministerForm and does administration
#              on Authors in the DB. AddAuthor is simpler and can only add
#              authors (perhaps suitable for everyone). 
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

use CGI;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "AuthorSQL.pm";
require "Debug.pm";

$query = new CGI;  # Global for subroutines

print $query->header;
&DocDBHeader("Modified List of Authors");

%params = $query -> Vars;

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script 

$Password      = $params{password};
$Username      = $Administrator;
$Action        = $params{admaction};

@AuthorIDs     = split ("\0",$params{authors});
$FirstName     = $params{first};
$Middle        = $params{middle};
$LastName      = $params{lastname};
$InstitutionID = $params{inst};

unless (&CanAdminister) {
  push @error_stack,"You must be logged in as the adminstrator to delete
  authors";
}  
&EndPage(@ErrorStack);

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,"Unable to connect to the database. Check the password.";
}         
&EndPage(@ErrorStack);

if      ($Action eq "Delete") {
  foreach my $AuthorID (@AuthorIDs) {
    my $AuthorLink   = &AuthorLink($AuthorID);
    my @AuthorDocIDs = &GetAuthorDocuments($AuthorID);
    
    # Delete AuthorID from Author, RevisionAuthor tables
    
    my $AuthorDelete   = $dbh -> prepare("delete from Author         where AuthorID=?");
    my $RevisionDelete = $dbh -> prepare("delete from RevisionAuthor where AuthorID=?");
    $AuthorDelete   -> execute($AuthorID);
    $RevisionDelete -> execute($AuthorID);
   
    print "$AuthorLink has been removed from the database.<br>\n";
    if (@AuthorDocIDs) {
      push @WarnStack,"$AuthorLink was an author on documents. These
                       entries have been removed.";
    }  
  }  
} elsif ($Action eq "Modify") {
  if (scalar(@AuthorIDs) != 1) {
    push @ErrorStack,"You can only modify one author at a time.";
  } else {
    ($AuthorID) = @AuthorIDs;

    if ($FirstName && $LastName) { # Deal with name changes (first & last will update initials)     
      print "<b>Updating full name.</b><br>\n";
      my $AuthorUpdate = $dbh->prepare(
         "update Author set FirstName=?,MiddleInitials=?, LastName=? ".
         "where AuthorID=?");
      $AuthorUpdate -> execute($FirstName,$Middle,$LastName,$AuthorID);
    } elsif ($FirstName) {         
      print "<b>Updating first name.</b><br>\n";
      my $AuthorUpdate = $dbh->prepare(
         "update Author set FirstName=? where AuthorID=?");
      $AuthorUpdate -> execute($FirstName,$AuthorID);
    } elsif ($LastName) {         
      print "<b>Updating last name.</b><br>\n";
      my $AuthorUpdate = $dbh->prepare(
         "update Author set LastName=? where AuthorID=?");
      $AuthorUpdate -> execute($LastName,$AuthorID);
    } elsif ($Middle) {         
      print "<b>Updating middle initials.</b><br>\n";
      my $AuthorUpdate = $dbh->prepare(
         "update Author set MiddleInitials=? where AuthorID=?");
      $AuthorUpdate -> execute($Middle,$AuthorID);
    } 

    if ($InstitutionID) { # Deal with institution changes
      print "<b>Updating institution.</b><br>\n";
      my $AuthorUpdate = $dbh->prepare(
         "update Author set InstitutionID=? where AuthorID=?");
      $AuthorUpdate -> execute($InstitutionID,$AuthorID);
    }
  }
} elsif ($Action eq "New") {
  print "Adding author <p>\n";
} else {
  push @ErrorStack,"No valid action was specified.";
}  

# For modify or new fetch author information and display.

print "<p>\n";

&EndPage(@ErrorStack);
&WarnPage(@WarnStack);


&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

 
exit;
