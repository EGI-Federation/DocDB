#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

use CGI;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "MySQLAccess.pm";
require "FSUtilities.pm";
require "HTMLUtilities.pm";
require "Security.pm";
require "SQLChecks.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

@error_stack = ();
@warn_stack  = ();

$DocumentID = $params{docid};
unless ($DocumentID) {
  push @error_stack,"You are must supply a document number!";
}  

$FileName  = $params{filename};
$Extension = $params{extension};
$AsOf      = $params{asof};
$Version   = $params{version};

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
&GetSecurityGroups;

&FetchDocument($DocumentID);

unless (defined $Version || defined $AsOf) {
  $Version = $Documents{$DocumentID}{NVER};
}

if (defined $Version && defined $AsOf) {
  push @error_stack,"You may not specify both a version and date.";
}

if (@error_stack) {  # The user made one or more mistakes, warn and exit
  print $query -> header;
  &BTeVHeader("File Retrieve Results"); 
  &EndPage(@error_stack);
}

my $DocRevID;
if (defined $Version) {
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
} elsif (defined $AsOf) {
  unless (&CheckSQLDate($AsOf)) {
    push @error_stack,"The as-of date must be specifed in the form YYYY-MM-DD.";
  }
  $DocRevID = &FetchRevisionByDocumentAndDate($DocumentID,$AsOf);
  $Version  = $DocRevisions{$DocRevID}{VERSION};
}

unless (&CanAccess($DocumentID,$Version)) {
  push @error_stack,"You are not authorized to view this document.";
}  
unless ($DocRevID) {
  push @error_stack,"This document does not exist.";
}

if (@error_stack) {  # The user made one or more mistakes, warn and exit
  print $query -> header;
  &BTeVHeader("File Retrieve Results"); 
  &EndPage(@error_stack);
}

if ($FileName) {
  $FullFile = &FullFile($DocumentID,$Version,$FileName);
  $FullURL = &GetURLDir($DocumentID,$Version).CGI::escape($FileName);
} elsif ($Extension) {
  &FetchDocFiles($DocRevID);
  my $NFiles = 0;
  my $LastFile = "";
  foreach my $DocFileID (keys %DocFiles) {
    if ($DocFiles{$DocFileID}{DOCREVID} == $DocRevID &&
        grep /$Extension$/i,$DocFiles{$DocFileID}{NAME}) {
      ++$NFiles;
      $LastFile = $DocFiles{$DocFileID}{NAME};
    } 
  }
  if ($NFiles == 1) {
    $FullFile = &FullFile($DocumentID,$Version,$LastFile);
    $FullURL = &GetURLDir($DocumentID,$Version).CGI::escape($LastFile);
  } elsif ($NFiles > 1) {
    push @warn_stack,"More than one file was found. Please select one below.";
  }  
} else {
  &FetchDocFiles($DocRevID);
  my $NFiles = 0;
  my $LastFile = "";
  foreach my $DocFileID (keys %DocFiles) {
    if ($DocFiles{$DocFileID}{DOCREVID} == $DocRevID &&
        $DocFiles{$DocFileID}{ROOT}) {
      ++$NFiles;
      $LastFile = $DocFiles{$DocFileID}{NAME};
    } 
  }
  if ($NFiles == 1) {
    $FullFile = &FullFile($DocumentID,$Version,$LastFile);
    $FullURL = &GetURLDir($DocumentID,$Version).CGI::escape($LastFile);
  } elsif ($NFiles > 1) {
    push @warn_stack,"More than one file was found. Please select one below.";
  } else {
    push @warn_stack,"No files were found. Document info is below.";
  }  
}    

unless (-e $FullFile) {
  push @warn_stack,"No appropriate file was found.";
}

if ($FullURL) {
  print $query -> redirect(-location => $FullURL, -method => 'GET');
} else {
  print $query -> header;
}
&BTeVHeader("File Retrieve Results"); 

if (@warn_stack) {
  &WarnPage(@warn_stack);
  @warn_stack = ();
}
if (@error_stack) {  # The user made one or more mistakes, warn and exit
  &EndPage(@error_stack);
}

&PrintRevisionInfo($DocRevID);

&DocDBNavBar;
&BTeVFooter($DBWebMasterEmail,$DBWebMasterName);
