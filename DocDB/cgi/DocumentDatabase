#! /usr/bin/env perl
#
# Description: The Document Database homepage. Give the user various ways to  
#              view documents, a link to ways to change documents, and a list 
#              of the most recently updated documents.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

# Copyright 2001-2004 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


use Benchmark;
use CGI;                                                      
use DBI;                                                      

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "HTMLUtilities.pm";
require "SecuritySQL.pm";
require "Security.pm";
require "Scripts.pm";
require "ResponseElements.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "Sorts.pm";

require "ProjectMessages.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
&GetSecurityGroups;

# %params = $query -> Vars;  # No parameters (yet?) 

print $query->header;
&DocDBHeader("$Project Document Database","Document Database");

&HelpPopupScript;

if ($WelcomeMessage) {
  print "<p><center><h4>\n";
  print "$WelcomeMessage\n";
  print "</h4></center>\n";
}

print "<p><h4>Database options:</h4>\n";

print "<table cellspacing=10><tr><td>\n";

print "<ul>\n";
unless ($Public || !&CanCreate()) {
  print "<li><b><a href=\"$ModifyHome\">Create or change</a> documents or metadata</b><p>\n";
}
print "<li><b><a href=\"$SearchForm\">Search</a> documents</b><p>\n"; 

# Show document

print "<li>"; 
print $query -> startform('POST',$ShowDocument);
print $query -> submit (-value => "Show");
print " <b>$ShortProject-doc-#</b> "; 
print $query -> textfield(-name => "docid", -size => 6, -maxlength => 6);
print " <b>-v</b> "; 
print $query -> textfield(-name => "version", -size => 3, -maxlength => 3);
print $query -> endform;

print "<li>"; 
print "<b>List documents:</b>\n";

my @FirstColumn  = ();
my @OtherColumns = ();
my @Spanners     = ();

push @FirstColumn,"by <a href=\"$ListAuthors\">author</a>";
push @FirstColumn,"by <a href=\"$ListTopics\">topic</a>";
push @FirstColumn,"by <a href=\"$ListKeywords\">keyword</a>";
push @FirstColumn,"modified in the <a href=\"$LastModified?days=$LastDays\">last $LastDays days</a>";

push @OtherColumns,"from <a href=\"$ListByTopic?major=Conferences&mode=conference\">conferences</a>";
unless ($Public) {
  push @OtherColumns,"from <a href=\"$ListMeetings\">collaboration meetings</a>";
}
unless ($Public && !$PublicAccess{MeetingList}) {
  push @OtherColumns,"from <a href=\"$ListAllMeetings\">all meetings</a>";
}  
push @OtherColumns,"<a href=\"$web_root/Static/Lists/$remote_user/FullList.html\">all documents</a>";

push @Spanners,@MultiColumnDocumentLists;

my $Rows = scalar(@FirstColumn);
my $Cols = int((scalar(@OtherColumns) - 1)/scalar(@FirstColumn) + 1);

print "<table>\n";

for (my $Index = 0; $Index < $Rows; ++$Index) {
  print "<tr>\n";
  print "<td>&loz;&nbsp;",$FirstColumn[$Index],"</td>\n";
  for (my $ColIndex = 0; $ColIndex < $Cols; ++$ColIndex) {
    print "<td>&loz;&nbsp;",$OtherColumns[$Index+$ColIndex*$Rows],"</td>\n";
  }  
  print "</tr>\n";
}    

++$Cols;

foreach my $Spanner (@Spanners) {
  print "<tr>\n";
  print "<td colspan=$Cols>&loz;&nbsp;",$Spanner,"</td>\n";
  print "</tr>\n";
}    

print "</table><p>\n";
 
print "</ul>\n";
print "</td>\n";

print "</td>\n";
unless ($Public) {
  print "<td valign=top>\n";
  print "<ul style=\"line-height:2.0\">\n";
  print "<li><b><a href=\"$HelpFile\">Get instructions</a></b>\n";
  print "<li><b><a href=\"$SelectPrefs\">Set preferences</a></b>\n";
  print "<li><b><a href=\"$EmailLogin\">Setup/manage a personal account</a></b>\n";
  print "<li><b><a href=\"$Statistics\">Get statistics</a></b>\n";
if ($Project eq "Beams") {
  print "<li><b><a href=\"/cgi-bin/DocDB/RetrieveFile?docid=553\">Useful notes</a></b>\n";
}
  print "</ul>\n";

  print "</td>\n";
}
print "</tr></table>\n";

# Modified in last few days

$Days = $HomeLastDays;

my $revision_list = $dbh -> prepare(
   "select DocRevID from DocumentRevision 
    where TO_DAYS(NOW())-TO_DAYS(TimeStamp)<=?"); 

my $document_list = $dbh -> prepare(
   "select DocumentID from DocumentRevision where DocRevID=?"); 


my %DocumentIDs = ();
$revision_list -> execute($Days);
$revision_list -> bind_columns(undef, \($DocRevID));

while ($revision_list -> fetch) {
  $document_list -> execute($DocRevID);
  ($DocumentID) = $document_list -> fetchrow_array;
  $DocumentIDs{$DocumentID} = 1; # Hash removes duplicates
}

### Get list of documents and read in the information we need from database

my @AllDocumentIDs = keys %DocumentIDs;
my @DocumentIDs = ();
foreach my $DocumentID (@AllDocumentIDs) { # For shorter lists
  &FetchDocument($DocumentID);
  unless (&LastAccess($DocumentID) == -1) {;
    push @DocumentIDs,$DocumentID;
    &FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVersions});
  }
}

### Sort

@DocumentIDs = reverse sort DocumentByRevisionDate @DocumentIDs;  

### Print summary information

if ($#DocumentIDs >= $HomeMaxDocs) {
  $#DocumentIDs = $HomeMaxDocs - 1;
  print "<hr><center><h4>Last $HomeMaxDocs documents modified
         </h4></center>\n";
} else {  
  print "<hr><center><h4>Documents modified in the last $HomeLastDays
  days</h4></center>\n";
}

print "<center><table cellpadding=3>\n";

&DocumentSummary(0,$Mode); # Force table headers
my $NumDoc = 0;

foreach $DocumentID (@DocumentIDs) {
  unless ($DocumentID) {next;}
  $Version = &LastAccess($DocumentID);
  if ($Version == -1) {next;}
  &DocumentSummary($DocumentID,$Mode,$Version);
  ++$NumDoc;
}

print "</table></center>\n";
print "<p>\n";

{
  require "FormElements.pm";

  print $query -> startform('POST',$LastModified);
  print "<center>";
  print $query -> submit (-value => "Show Documents");
  print " modified in the last ";
  &DaysPulldown;
  print " days.</center>";
  print $query -> endform;
  print "<p>&nbsp;<p>";
}

$EndTime  = new Benchmark;

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

