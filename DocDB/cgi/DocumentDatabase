#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

use CGI;                                                      
use DBI;                                                      

require "DocDBGlobals.pm";
require "HTMLUtilities.pm";
require "SecuritySQL.pm";
require "Scripts.pm";
require "ResponseElements.pm";

$query = new CGI;  # Global for subroutines

# %params = $query -> Vars;  # No parameters (yet?) 

print $query->header;
&BTeVHeader("BTeV Document Database","Document Database");

&HelpPopupScript;

if ($Public) {
print "<p><center><h4>\n";
  print "Welcome to the public portion of the BTeV Document Database,<br>
         the repository for all BTeV public talks, proceedings, preprints, 
         and publications.\n";
print "</h4></center>\n";
} else {
print "<p><center><h3>\n";
  print "Welcome to the BTeV Document Database\n";
print "</h3></center>\n";
}

print "<p><h4>You can:</h4>\n";

print "<ul>\n";
  print "<li><b><a href=\"$ModifyHome\">Create or change</a> documents.</b><p>\n";
unless ($Public) {
  print "<li><b><a href=\"$SearchForm\">Search</a> documents</b>"; 
}

print "<p>\n";

print "<li>"; 
print $query -> startform('POST',$ShowDocument);
print $query -> submit (-value => "Show");
print " <b>BTeV-doc-#</b> "; 
print $query -> textfield(-name => "docid", -size => 6, -maxlength => 6);
print " <b>-v</b> "; 
print $query -> textfield(-name => "version", -size => 3, -maxlength => 3);
print $query -> endform;

print "<li>"; 
print "<b>List documents:</b>\n";

print "<table><tr>\n";
print "<td>\n";
print "<ul>\n";
print "<li> by <a href=\"$ListAuthors\">author</a>\n";
print "<li> by <a href=\"$ListTopics\">topic</a>\n";
print "<li>modified in the <a href=\"$LastModified?days=$LastDays\">last $LastDays days</a>";
print "</ul>\n";
print "</td>";

print "<td>\n";
print "<ul>\n";
unless ($Public) {
  print "<li> from <a href=\"$ListMeetings\">group meetings</a>\n";
}
print "<li>from <a href=\"$ListByTopic?major=Conferences&mode=conference\">conferences</a>";
print "<li><a href=\"$ListDocuments\">all documents</a>";
print "</ul>\n";
print "</td></tr>";
print "<td colspan=2>\n";
print "<ul>\n";
if ($Public) {
  print "<li> by old number
        <a href=\"$web_root/Static/Public/OldDBTranslation.shtml\">like
         BTeV-pub-year/xx</a>. \n";
} else {
  print "<li> by old number like
         <a href=\"$web_root/Static/Restricted/OldDBTranslation.shtml\">BTeV-pub-year/xx</a> from the <a href=\"http://www-btev.fnal.gov/cgi-private/database/doclist.pl\">old DocDB</a>\n";
}
print "</ul>\n";
print "</table><p>\n";
 
print "<li><b>Get <a href=\"$HelpFile\">Database instructions</a></b><p>\n";
print "</ul>\n";

print "<hr><center><h4>Documents modified in the last $HomeLastDays
days</h4></center>\n";

# Modified in last few days

$Days = $HomeLastDays;
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "Sorts.pm";
require "Security.pm";

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
&GetSecurityGroups;
my $revision_list = $dbh -> prepare(
   "select DocRevID from DocumentRevision 
    where TO_DAYS(NOW())-TO_DAYS(Timestamp)<=?"); 

my $document_list = $dbh -> prepare(
   "select DocumentID from DocumentRevision where DocRevID=?"); 


my %DocumentIDs = ();
$revision_list -> execute($Days);
$revision_list -> bind_columns(undef, \($DocRevID));

while ($revision_list -> fetch) {
  $document_list -> execute($DocRevID);
  ($DocumentID) = $document_list -> fetchrow_array;
  $DocumentIDs{$DocumentID} = 1; # Hash removes duplicates
}

### Get list of documents and read in the information we need from database

my @DocumentIDs = keys %DocumentIDs;

foreach my $DocumentID (@DocumentIDs) { # For shorter lists
  &FetchDocument($DocumentID);
  &FetchDocRevision($DocumentID,$Documents{$DocumentID}{NVER});
}

### Sort

@DocumentIDs = reverse sort DocumentByRevisionDate @DocumentIDs;  

### Print summary information

print "<center><table cellpadding=3>\n";

&DocumentSummary(0,$Mode); # Force table headers
my $NumDoc = 0;

foreach $DocumentID (@DocumentIDs) {
  unless ($DocumentID) {next;}
  unless (&CanAccess($DocumentID,$Documents{$DocumentID}{NVER})) {next;}
  # FIXME: Need to put latest document accessible if last version isn't
  ++$NumDoc;
  &DocumentSummary($DocumentID,$Mode);
}

print "</table></center>\n";
print "<p>\n";

{
  require "FormElements.pm";

  print $query -> startform('POST',$LastModified);
  print "<center>";
  print $query -> submit (-value => "Show Documents");
  print " modified in the last ";
  &DaysPulldown;
  print " days.</center>";
  print $query -> endform;
  print "<p>&nbsp;<p>";
}

&DocDBNavBar;
&BTeVFooter($DBWebMasterEmail,$DBWebMasterName);

