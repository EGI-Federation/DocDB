#! /usr/bin/env perl
#
# Description: This script provides a form to administer groups in 
#              the DocDB and shows the relationships between groups.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

use CGI;                                                                                      
use DBI;

require "DocDBGlobals.pm";
require "AdministerElements.pm";
require "FormElements.pm";
require "Scripts.pm";
require "Security.pm";
require "SecuritySQL.pm";

require "GroupHTML.pm";
require "HTMLUtilities.pm";
require "Sorts.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

#&GetInstitutions;
#&GetAuthors;
#&GetTopics;
&GetSecurityGroups;

print $query->header;
&DocDBHeader("Group Administration"); # DocDBHeader

&HelpPopupScript;

@ErrorStack = ();
@WarnStack  = ();

unless (&CanAdminister()) {
  push @ErrorStack,"You are not allowed to access administrative functions.";
}

if (@error_stack) {  # The user made one or more mistakes, warn and exit
  &EndPage(@error_stack);
}

print "Access to documents within the DocDB are controlled in several ways. A document can be
tagged as accessible to a subset of groups. Additionally, each group may have a list of subordinate
groups. Anything tagged as viewable by a subordinate is also viewable by the superior group.
(This relationship does not extend to more than one generation, though.)<p>\n";

print "Each group also has a flag determining whether that group is allowed to create new 
or modify existing documents.<p>\n";

print "If a group is allowed to view a document, it can change that document (assuming they
also have the create/modify flag set).<p>\n";

print "These group names must match those in the <b>.htpasswd</b> although the comparison is
       not case sensitive.<p>\n";


print "Note that deleting and then re-entering with the same information is not the same as
modifying. Everything in the DB is tied together with invisible ID numbers. Be very careful about
deleting groups; you may end up with documents not accessible to anyone.<p>\n";

### Group Modification

#print "<a name=\"author\"><center><h4>Administer Authors</h4></center>\n";

print $query -> start_multipart_form('POST',"$GroupAdminister");
print "<table cellpadding=10>\n";
print "<tr valign=top>\n";
print "<td colspan=2>\n"; &AdministerActions;      print "</td>\n";
print "</tr>\n";

print "<tr valign=top>\n";
print "<td>\n"; &ParentSelect; print "</td>\n";  
print "<td>\n"; &ChildSelect; print "</td>\n";
print "<td>\n"; &GroupEntryBox;      print "</td>\n";
print "</tr>\n";

print "<tr valign=top>\n";
print "<td colspan=3>\n";
&AdministratorPassword;
print "&nbsp;";
print $query -> submit (-value => "Change Group Info");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

print "<p>\n";
print "<b>The current groups and the relationships between them are shown below:</b><p>\n";
print "<p><hr>\n";

### Display of existing groups

my @GroupIDs = sort numerically keys %SecurityGroups;

print "<table cellpadding=10>\n";
foreach my $GroupID (@GroupIDs) {
  print "<tr valign=top>\n";
  print "<td><b>$SecurityGroups{$GroupID}{NAME}</b><br>($SecurityGroups{$GroupID}{DESCRIPTION})</td>\n";
  print "<td>\n";
  print "Dominant groups:\n";
  &PrintGroupParents($GroupID);
  print "</td>\n";
  print "<td>\n";
  print "Subordinate groups:\n";
  &PrintGroupChildren($GroupID);
  print "</td>\n";
  print "<td>\n";
  print "Permissions:\n";
  &PrintGroupPermissions($GroupID);
  print "</td>\n";
  print "</tr>\n";
} 
print "</table>\n";


print "<p><hr><p>\n";

&DocDBNavBar();
&BTeVFooter($DBWebMasterEmail,$DBWebMasterName);
